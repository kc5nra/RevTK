/*jslint forin: true */
/*global window, Core, App, YAHOO, alert, console, document */
/**
 * Core.Widgets.TabbedView
 * 
 * Setting up with the ui_tabs() helper:
 *   For each link definition in ui_tabs(), add the class name "uiTabbedView-xxx" in the options.
 *   Use the same format, as ID attribute on the corresponding view divs (<div id="uiTabbedView-xxx").
 *   Optionally wrap the views with a container <div class="uiTabbedBody"> to match the uiTabs styles.
 * 
 * Structure:
 *   Example structure with the base styles from uiTabs and uiTabbedBody
 *   
 *   <?php echo ui_tabs(...) ?>
 *   
 *   <div class="uiTabbedBody">
 *     <div id="uiTabbedView-one">
 *        View one
 *     </div>
 *     <div id="uiTabbedView-two">
 *        View two
 *     </div>
 *     ...
 *   </div>
 *   
 * Tabs structure (generated by ui_tabs() helper):
 * 
 *   <div class="uiTabs">
 *   
 * Options:
 * 
 *   elContainer    The wrapper div of the ui-tabs, usually this is the element with the id
 *                  that was passed to the ui_tabs() helper (as options).
 *   
 *   events         An array of listeners to register (name => handler).
 *   
 * Listeners:
 * 
 *   onTabClick(view_id)
 *                  Fires after a tab is activated and visible.
 *   onTabFocus(view_id)
 *                  Fires when a tab is clicked on, before the corresponding view is made
 *                  visible and the tab is made active. First argument is the view id
 *                  (the "xxx" part in the class name "uiTabbedView-xxx").
 *   onTabBlur(view_id)
 *                  Fires when a tab looses focus, before the new one is activated.
 * 
 * @author   Fabrice Denis
 * @version  2009/11/30 (yui3)
 */
(function() {

  Core.Widgets.TabbedView = function() {
    this.init.apply(this, arguments);
  };
  
  var Y = Core.YUI,
      Ui = Core.Ui,
      TabbedView = Core.Widgets.TabbedView;

  TabbedView.prototype =
  {
    init: function(elContainer, events)
    {
      elContainer = Ui.getNode(elContainer);
      
      this.evtCache = new Core.Ui.EventCache();
      
      // register events
      this.eventDispatcher = new Core.Ui.EventDispatcher();
      if (events) {
        for (var sEvent in events) {
          this.eventDispatcher.connect(sEvent, events[sEvent]);
        }
      }
  
      this.views = {};
      this.activeTab = null;

      // collect tabs & views
      elContainer.all('li').each(function(node, pos, nodelist)
      {
        var link = node.one('a'),
            href = link.getAttribute('href');
            
        if (href.substr(0, 1) === '#')
        {
          var anchor = href.substr(1),
              div;
          
          //console.log('anchor %o %s', node._node, anchor);

          div = Ui.getNode(anchor) || Core.error('TabbedView.init() Invalid view id "' + anchor + '"');
          this.views[anchor] = { tab: node, view: div };
          
          this.evtCache.addEvent(node, "click", Core.bind(this.evTabClick, this, anchor));
    
          if (node.hasClass('active')) {
            this.activeTab = anchor;
          }
        }
        
      }, this);

      //this.evtDel = new Core.Ui.EventDelegator(elContainer, "click");
      //this.evtDel.onTag("li", this.evTabClick, this);
    },
    
    destroy: function()
    {
      this.evtCache.destroy();
    },
    
    /**
     * 
     * @param {Object} e   Yui3 event facade
     * @param {string} viewId  From the tab link anchor
     */ 
    evTabClick: function(e, viewId)
    {
      // blur last tab
      if (this.activeTab !== null && this.activeTab !== viewId)
      {
        this.views[this.activeTab].tab.removeClass("active");
        this.eventDispatcher.notify("onTabBlur", this.activeTab);
      }
  
      // focus new tab
      if (viewId !== this.activeTab)
      {
        this.activeTab = viewId;
        this.eventDispatcher.notify("onTabFocus", viewId);
        this.views[viewId].tab.addClass("active");
  
        for (id in this.views) {
          this.views[id].view.setStyle("display", id === viewId ? "block" : "none");
        }
      }
      
      this.eventDispatcher.notify('onTabClick', viewId);
      
      e.halt();
    }
  };
  
})();